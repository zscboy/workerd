load("@aspect_rules_js//npm:defs.bzl", "npm_link_package")
load("@bazel_skylib//lib:selects.bzl", "selects")
load("@bazel_skylib//rules:common_settings.bzl", "bool_flag")
load("@capnp-cpp//src/capnp:cc_capnp_library.bzl", "cc_capnp_library")
load("@npm//:capnpc-ts/package_json.bzl", capnpc_ts_bin = "bin")
load("@npm//:defs.bzl", "npm_link_all_packages")

cc_capnp_library(
    name = "icudata-embed",
    srcs = ["icudata-embed.capnp"],
    include_prefix = ".",
    visibility = ["//visibility:public"],
    data = ["@com_googlesource_chromium_icu//:icudata"],
    defines = [ "WORKERD_ICU_DATA_EMBED" ],
)

npm_link_all_packages(name = "node_modules")

npm_link_package(
    name = "node_modules/@workerd/jsg",
    src = "//src/workerd/jsg:jsg_js",
    package = "@workerd/jsg",
)

capnpc_ts_bin.capnpc_ts_binary(
    name = "capnpc_ts",
    visibility = ["//visibility:public"],
)

# Platform definition for using clang-cl on Windows
platform(
    name = "x64_windows-clang-cl",
    constraint_values = [
        "@platforms//cpu:x86_64",
        "@platforms//os:windows",
        "@bazel_tools//tools/cpp:clang-cl",
    ],
)

platform(
    name = "android_arm64-v8a",
    constraint_values = [
        "@platforms//os:android",
        "@platforms//cpu:arm64",
    ],
)

# use following cmd to build android_armeabi-v7a
#   bazelisk build //src/workerd/server:goworkerd --config=thin-lto --config=m32 --platforms=//:android_armeabi-v7a
# need gcc-multilib in host platform
#   sudo apt-get install -y gcc-multilib
platform(
    name = "android_armeabi-v7a",
    constraint_values = [
        "@platforms//os:android",
        "@platforms//cpu:armv7",
    ],
)

platform(
    name = "android_x86-64",
    constraint_values = [
        "@platforms//os:android",
        "@platforms//cpu:x86_64",
    ],
)

# for build android_armeabi-v7a, used in '.bazelrc'
#  build:m32 --extra_execution_platforms=//:linux_x86
platform(
    name = "linux_x86",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:x86_32",
    ],
)

# bazel enables the --ffunction-sections, --gc-sections flags used to remove dead code by default
# on Linux opt builds. Enable the equivalent macOS flag -Wl,-dead_strip here to work around bazel
# idiosyncrasies.
# Note that the flag is defined for all non-debug builds of kj_test() and wd_cc_binary() on mac as
# it surprisingly appears to be faster, perhaps because the linker generates and writes binaries
# with much fewer symbols. This also helps reduce local and CI disk usage. If needed, dead code
# stripping can be limited to optimized builds.
config_setting(
    name = "fast_build",
    values = {"compilation_mode": "fastbuild"},
)

config_setting(
    name = "opt_build",
    values = {"compilation_mode": "opt"},
)

bool_flag(
    name = "dead_strip",
    build_setting_default = True,
)

config_setting(
    name = "set_dead_strip",
    flag_values = {"dead_strip": "True"},
)

# Workaround for bazel not supporting negated conditions (https://github.com/bazelbuild/bazel-skylib/issues/272)
selects.config_setting_group(
    name = "not_dbg_build",
    match_any = [":fast_build", ":opt_build"],
)

selects.config_setting_group(
    name = "use_dead_strip",
    match_all = ["@platforms//os:macos", ":set_dead_strip", ":not_dbg_build"],
)

config_setting(
    name = "android-arm",
    constraint_values = [
        "@platforms//os:android",
        "@platforms//cpu:armv7",
    ],
)

config_setting(
    name = "android-arm64",
    constraint_values = [
        "@platforms//os:android",
        "@platforms//cpu:arm64",
    ],
)

config_setting(
    name = "android-x64",
    constraint_values = [
        "@platforms//os:android",
        "@platforms//cpu:x86_64",
    ],
)

config_setting(
    name = "linux-x64",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:x86_64",
    ],
)

config_setting(
    name = "windows-x64",
    constraint_values = [
        "@platforms//os:windows",
        "@platforms//cpu:x86_64",
    ],
)


config_setting(
    name = "macos-x64",
    constraint_values = [
        "@platforms//os:macos",
        "@platforms//cpu:x86_64",
    ],
)


selects.config_setting_group(
    name = "target32",
    match_any = [":android-arm"],
)

selects.config_setting_group(
    name = "target64",
    match_any = [":android-arm64", ":android-x64", ":linux-x64", ":windows-x64", ":macos-x64"],
)

bool_flag(
    name = "is_target_m32",
    build_setting_default = False,
)

bool_flag(
    name = "is_target_m64",
    build_setting_default = False,
)

config_setting(
    name = "m64flag",
    flag_values = {"is_target_m64": "True"},
)

config_setting(
    name = "m32flag",
    flag_values = {"is_target_m32": "True"},
)

selects.config_setting_group(
    name = "m64h",
    match_all = [":target64", ":m64flag"],
)

selects.config_setting_group(
    name = "m32h",
    match_all = [":target32", ":m32flag"],
)
